cabal-version: 3.0
name: hoare
synopsis: Simple tools for communicating sequential processes
description:
    Hoare was rightâ€”many concurrent programs can be simply expressed
    as a series of concurrent actors (threads) consuming and producing
    messages. Haskell provides uniquely good tools for doing so
    (green threads and STM). This package provides:

    - Functions for using bounded STM types like
      `TBQueue` and `TMVar` as /channels/ between threads.

    - A /closeable/ @TBCQueue@ for programs where the input ends.
version: 0.1.0.0
license: Zlib
author: Matt Kline
maintainer: matt@bitbashing.io
category: Concurrency
build-type: Simple

common shared
    ghc-options: -Weverything
                 -Wno-all-missed-specialisations
                 -Wno-implicit-prelude
                 -Wno-missed-specialisations
                 -Wno-missing-export-lists
                 -Wno-missing-import-lists
                 -Wno-missing-kind-signatures
                 -Wno-missing-local-signatures
                 -Wno-missing-role-annotations
                 -Wno-missing-safe-haskell-mode
                 -Wno-monomorphism-restriction
                 -Wno-safe
                 -Wno-type-defaults
                 -Wno-unsafe
                 -Wno-x-partial
                 -threaded
                 -fno-ignore-asserts
    default-language: Haskell2010
    default-extensions: BangPatterns,
                        DerivingStrategies,
                        ImportQualifiedPost,
                        LambdaCase,
                        OverloadedRecordDot,
                        RecordWildCards,

library
    import: shared
    exposed-modules: Control.Concurrent.Channel
                     Control.Concurrent.Channel.Endless
                     Control.Concurrent.TBCQueue
    hs-source-dirs: lib
    build-depends: base,
                   async,
                   deepseq,
                   stm,
